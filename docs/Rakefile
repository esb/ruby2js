begin
  require "bridgetown"

  Bridgetown.load_tasks
rescue LoadError => e
  puts "Warning: Bridgetown gem not available in this environment. (OK when compiling JS packages)"
end

#
# Standard set of tasks, which you can customize if you wish:
#
desc "Build the Bridgetown site for deployment"
task :deploy => [:bt_clean, "frontend:build", :default] do
  Bridgetown::Commands::Build.start
end

desc "Build the site in a test environment"
task :test do
  ENV["BRIDGETOWN_ENV"] = "test"
  Bridgetown::Commands::Build.start
end

desc "Runs the clean command"
task :bt_clean do
  Bridgetown::Commands::Clean.start
end

namespace :frontend do
  desc "Build the frontend with esbuild for deployment"
  task :build do
    sh "yarn run esbuild"
  end

  desc "Watch the frontend with esbuild during development"
  task :dev do
    sh "yarn run esbuild-dev"
  rescue Interrupt
  end
end

####

docs = File.expand_path(__dir__)
dest = "#{docs}/src/demo"
root = File.expand_path('..', docs)
demo = "#{root}/demo"
source_files = Rake::FileList.new("#{root}/lib/**/*.rb", "#{root}/lib/ruby2js.rb")
filters = Rake::FileList.new("#{root}/lib/ruby2js/filter/*.rb")
opal_files = Rake::FileList.new("#{root}/demo/*.opal")
controller_files = Rake::FileList.new("#{root}/demo/controllers/*_controller.js.rb")

require 'bundler/setup'
require 'regexp_parser'
regexp_parser_path = File.dirname(Gem.find_files_from_load_path('regexp_parser').first)

terser = "npx terser --compress --mangle"
terser = "cat" if ENV['NODE_ENV'] == 'development'

file "#{root}/demo/filters.opal" => filters do
  puts 'generate filters.opal'
  content = filters.map do |file|
    next if File.basename(file) == 'lit-element.rb'
    require file
    "require #{"ruby2js/filter/#{File.basename(file, '.rb')}".inspect}"
  end

  # find each module and add it to the list of filters.
  filters = {}
  Ruby2JS::Filter::DEFAULTS.each do |mod|
    method = mod.instance_method(mod.instance_methods.first)
    name = method.source_location.first
    filters[File.basename(name, '.rb')] = mod
  end
  content << "Ruby2JS::Filter.registered_filters.merge!(#{filters.inspect})"

  IO.write "#{root}/demo/filters.opal", content.compact.join("\n")
end

file "#{dest}/index.erb" => [*filters, "#{root}/demo/ruby2js.rb"] do
  puts "Generating #{dest}/index.erb"
  mkdir dest unless Dir.exist? dest

  begin
    request_uri = ENV['REQUEST_URI']
    ENV['REQUEST_URI'] = '/demo'
    livedoc = `#{RbConfig.ruby} #{root}/demo/ruby2js.rb --live`
  ensure
    if request_uri
      ENV['REQUEST_URI'] = request_uri
    else
      ENV.delete 'REQUEST_URI'
    end

    erb = [
      "---\nlayout: default\n---\n",
      livedoc[/<body.*?>(.*?)<\/body>/m, 1].
        sub(/<style.*?<\/style>/m, '').
        sub(/<script.*?<\/script>/m, ''),
    ].join("\n")

    IO.write("#{dest}/index.erb", erb)
  end
end

file "#{dest}/editor.js" => ["#{root}/demo/editor.js"] do
  sh "cat #{root}/demo/editor.js | " +
    "npx rollup -f iife -p @rollup/plugin-node-resolve |" +
    "#{terser} > src/demo/editor.js"
end

file "#{dest}/litelement.js" => ["#{root}/demo/litelement.js"] do
  sh "cat #{root}/demo/litelement.js | " +
    "npx rollup -f iife -p @rollup/plugin-node-resolve |" +
    "#{terser} > src/demo/litelement.js"
end

file "#{dest}/livedemo.js" => ["#{root}/demo/livedemo.js.rb", *controller_files] do
  sh "#{RbConfig.ruby} #{root}/demo/ruby2js.rb --filter esm --filter require --filter stimulus --filter functions --identity --es2019 #{root}/demo/livedemo.js.rb | " +
    "npx rollup -f iife --context window -p @rollup/plugin-node-resolve | " +
    "#{terser} > #{dest}/livedemo.js"
end

deps = [*opal_files, *source_files, "#{root}/demo/filters.opal"]
opal = "opal --compile -E -I #{regexp_parser_path} -I #{root}/lib -I #{demo} #{demo}/ruby2js.opal"

file "#{dest}/ruby2js.js" => deps do
  mkdir dest unless Dir.exist? dest
  Dir.chdir dest do
    sh "#{opal} | #{terser} > #{dest}/ruby2js.js"
  end
end

file "ruby2js.js" => deps do
  target = File.expand_path('ruby2js.js')
  Dir.chdir docs do
    sh "#{opal} | #{terser} > #{target}"
  end
end

task :clean do
  rm_rf "#{docs}/src/demo"
end

task :default => [
  "#{dest}/index.erb",
  "#{dest}/editor.js",
  "#{dest}/litelement.js",
  "#{dest}/livedemo.js",
  "#{dest}/ruby2js.js"
]

